(function (designSystem, adminjs, React) {
    'use strict';

    function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

    var React__default = /*#__PURE__*/_interopDefault(React);

    const Edit = ({
      property,
      record,
      onChange
    }) => {
      const {
        translateProperty
      } = adminjs.useTranslation();
      const {
        params
      } = record;
      const {
        custom
      } = property;
      const path = adminjs.flat.get(params, custom.filePathProperty);
      const key = adminjs.flat.get(params, custom.keyProperty);
      const file = adminjs.flat.get(params, custom.fileProperty);
      const [originalKey, setOriginalKey] = React.useState(key);
      const [filesToUpload, setFilesToUpload] = React.useState([]);
      React.useEffect(() => {
        // it means means that someone hit save and new file has been uploaded
        // in this case fliesToUpload should be cleared.
        // This happens when user turns off redirect after new/edit
        if (typeof key === 'string' && key !== originalKey || typeof key !== 'string' && !originalKey || typeof key !== 'string' && Array.isArray(key) && key.length !== originalKey.length) {
          setOriginalKey(key);
          setFilesToUpload([]);
        }
      }, [key, originalKey]);
      const onUpload = files => {
        setFilesToUpload(files);
        onChange(custom.fileProperty, files);
      };
      const handleRemove = () => {
        onChange(custom.fileProperty, null);
      };
      const handleMultiRemove = singleKey => {
        const index = (adminjs.flat.get(record.params, custom.keyProperty) || []).indexOf(singleKey);
        const filesToDelete = adminjs.flat.get(record.params, custom.filesToDeleteProperty) || [];
        if (path && path.length > 0) {
          const newPath = path.map((currentPath, i) => i !== index ? currentPath : null);
          let newParams = adminjs.flat.set(record.params, custom.filesToDeleteProperty, [...filesToDelete, index]);
          newParams = adminjs.flat.set(newParams, custom.filePathProperty, newPath);
          onChange({
            ...record,
            params: newParams
          });
        } else {
          // eslint-disable-next-line no-console
          console.log('You cannot remove file when there are no uploaded files yet');
        }
      };
      return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, translateProperty(property.label, property.resourceId)), /*#__PURE__*/React__default.default.createElement(designSystem.DropZone, {
        onChange: onUpload,
        multiple: custom.multiple,
        validate: {
          mimeTypes: custom.mimeTypes,
          maxSize: custom.maxSize
        },
        files: filesToUpload
      }), !custom.multiple && key && path && !filesToUpload.length && file !== null && /*#__PURE__*/React__default.default.createElement(designSystem.DropZoneItem, {
        filename: key,
        src: path,
        onRemove: handleRemove
      }), custom.multiple && key && key.length && path ? /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, key.map((singleKey, index) => {
        // when we remove items we set only path index to nulls.
        // key is still there. This is because
        // we have to maintain all the indexes. So here we simply filter out elements which
        // were removed and display only what was left
        const currentPath = path[index];
        return currentPath ? /*#__PURE__*/React__default.default.createElement(designSystem.DropZoneItem, {
          key: singleKey,
          filename: singleKey,
          src: path[index],
          onRemove: () => handleMultiRemove(singleKey)
        }) : '';
      })) : '');
    };

    const AudioMimeTypes = ['audio/aac', 'audio/midi', 'audio/x-midi', 'audio/mpeg', 'audio/ogg', 'application/ogg', 'audio/opus', 'audio/wav', 'audio/webm', 'audio/3gpp2'];
    const ImageMimeTypes = ['image/bmp', 'image/gif', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/vnd.microsoft.icon', 'image/tiff', 'image/webp'];

    // eslint-disable-next-line import/no-extraneous-dependencies
    const SingleFile = props => {
      const {
        name,
        path,
        mimeType,
        width
      } = props;
      if (path && path.length) {
        if (mimeType && ImageMimeTypes.includes(mimeType)) {
          return /*#__PURE__*/React__default.default.createElement("img", {
            src: path,
            style: {
              maxHeight: width,
              maxWidth: width
            },
            alt: name
          });
        }
        if (mimeType && AudioMimeTypes.includes(mimeType)) {
          return /*#__PURE__*/React__default.default.createElement("audio", {
            controls: true,
            src: path
          }, "Your browser does not support the", /*#__PURE__*/React__default.default.createElement("code", null, "audio"), /*#__PURE__*/React__default.default.createElement("track", {
            kind: "captions"
          }));
        }
      }
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        as: "a",
        href: path,
        ml: "default",
        size: "sm",
        rounded: true,
        target: "_blank"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
        icon: "DocumentDownload",
        color: "white",
        mr: "default"
      }), name));
    };
    const File = ({
      width,
      record,
      property
    }) => {
      const {
        custom
      } = property;
      let path = adminjs.flat.get(record?.params, custom.filePathProperty);
      if (!path) {
        return null;
      }
      const name = adminjs.flat.get(record?.params, custom.fileNameProperty ? custom.fileNameProperty : custom.keyProperty);
      const mimeType = custom.mimeTypeProperty && adminjs.flat.get(record?.params, custom.mimeTypeProperty);
      if (!property.custom.multiple) {
        if (custom.opts && custom.opts.baseUrl) {
          path = `${custom.opts.baseUrl}/${name}`;
        }
        return /*#__PURE__*/React__default.default.createElement(SingleFile, {
          path: path,
          name: name,
          width: width,
          mimeType: mimeType
        });
      }
      if (custom.opts && custom.opts.baseUrl) {
        const baseUrl = custom.opts.baseUrl || '';
        path = path.map((singlePath, index) => `${baseUrl}/${name[index]}`);
      }
      return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, path.map((singlePath, index) => /*#__PURE__*/React__default.default.createElement(SingleFile, {
        key: singlePath,
        path: singlePath,
        name: name[index],
        width: width,
        mimeType: mimeType[index]
      })));
    };

    const List = props => /*#__PURE__*/React__default.default.createElement(File, {
      width: 100,
      ...props
    });

    const Show = props => {
      const {
        property
      } = props;
      return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, property.label), /*#__PURE__*/React__default.default.createElement(File, {
        width: "100%",
        ...props
      }));
    };

    const PasswordEdit = props => {
      const {
        onChange,
        property,
        record,
        resource
      } = props;
      const {
        translateButton: tb
      } = adminjs.useTranslation();
      const [showPassword, togglePassword] = React.useState(false);
      React.useEffect(() => {
        if (!showPassword) {
          onChange(property.name, '');
        }
      }, [onChange, showPassword]);
      // For new records always show the property
      if (!record.id) {
        return /*#__PURE__*/React__default.default.createElement(adminjs.BasePropertyComponent.Password.Edit, props);
      }
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, showPassword && /*#__PURE__*/React__default.default.createElement(adminjs.BasePropertyComponent.Password.Edit, props), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        mb: "xl"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        textAlign: "center"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        onClick: () => togglePassword(!showPassword),
        type: "button"
      }, showPassword ? tb('cancel', resource.id) : tb('changePassword', resource.id)))));
    };

    AdminJS.UserComponents = {};
    AdminJS.UserComponents.UploadEditComponent = Edit;
    AdminJS.UserComponents.UploadListComponent = List;
    AdminJS.UserComponents.UploadShowComponent = Show;
    AdminJS.UserComponents.PasswordEditComponent = PasswordEdit;

})(AdminJSDesignSystem, AdminJS, React);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGFkbWluanMvdXBsb2FkL2J1aWxkL2ZlYXR1cmVzL3VwbG9hZC1maWxlL2NvbXBvbmVudHMvVXBsb2FkRWRpdENvbXBvbmVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYWRtaW5qcy91cGxvYWQvYnVpbGQvZmVhdHVyZXMvdXBsb2FkLWZpbGUvdHlwZXMvbWltZS10eXBlcy50eXBlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BhZG1pbmpzL3VwbG9hZC9idWlsZC9mZWF0dXJlcy91cGxvYWQtZmlsZS9jb21wb25lbnRzL2ZpbGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGFkbWluanMvdXBsb2FkL2J1aWxkL2ZlYXR1cmVzL3VwbG9hZC1maWxlL2NvbXBvbmVudHMvVXBsb2FkTGlzdENvbXBvbmVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYWRtaW5qcy91cGxvYWQvYnVpbGQvZmVhdHVyZXMvdXBsb2FkLWZpbGUvY29tcG9uZW50cy9VcGxvYWRTaG93Q29tcG9uZW50LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BhZG1pbmpzL3Bhc3N3b3Jkcy9idWlsZC9jb21wb25lbnRzL1Bhc3N3b3JkRWRpdENvbXBvbmVudC5qc3giLCIuZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHJvcFpvbmUsIERyb3Bab25lSXRlbSwgRm9ybUdyb3VwLCBMYWJlbCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgZmxhdCwgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdhZG1pbmpzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuY29uc3QgRWRpdCA9ICh7IHByb3BlcnR5LCByZWNvcmQsIG9uQ2hhbmdlIH0pID0+IHtcbiAgICBjb25zdCB7IHRyYW5zbGF0ZVByb3BlcnR5IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICAgIGNvbnN0IHsgcGFyYW1zIH0gPSByZWNvcmQ7XG4gICAgY29uc3QgeyBjdXN0b20gfSA9IHByb3BlcnR5O1xuICAgIGNvbnN0IHBhdGggPSBmbGF0LmdldChwYXJhbXMsIGN1c3RvbS5maWxlUGF0aFByb3BlcnR5KTtcbiAgICBjb25zdCBrZXkgPSBmbGF0LmdldChwYXJhbXMsIGN1c3RvbS5rZXlQcm9wZXJ0eSk7XG4gICAgY29uc3QgZmlsZSA9IGZsYXQuZ2V0KHBhcmFtcywgY3VzdG9tLmZpbGVQcm9wZXJ0eSk7XG4gICAgY29uc3QgW29yaWdpbmFsS2V5LCBzZXRPcmlnaW5hbEtleV0gPSB1c2VTdGF0ZShrZXkpO1xuICAgIGNvbnN0IFtmaWxlc1RvVXBsb2FkLCBzZXRGaWxlc1RvVXBsb2FkXSA9IHVzZVN0YXRlKFtdKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBpdCBtZWFucyBtZWFucyB0aGF0IHNvbWVvbmUgaGl0IHNhdmUgYW5kIG5ldyBmaWxlIGhhcyBiZWVuIHVwbG9hZGVkXG4gICAgICAgIC8vIGluIHRoaXMgY2FzZSBmbGllc1RvVXBsb2FkIHNob3VsZCBiZSBjbGVhcmVkLlxuICAgICAgICAvLyBUaGlzIGhhcHBlbnMgd2hlbiB1c2VyIHR1cm5zIG9mZiByZWRpcmVjdCBhZnRlciBuZXcvZWRpdFxuICAgICAgICBpZiAoKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSAhPT0gb3JpZ2luYWxLZXkpXG4gICAgICAgICAgICB8fCAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycgJiYgIW9yaWdpbmFsS2V5KVxuICAgICAgICAgICAgfHwgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkoa2V5KSAmJiBrZXkubGVuZ3RoICE9PSBvcmlnaW5hbEtleS5sZW5ndGgpKSB7XG4gICAgICAgICAgICBzZXRPcmlnaW5hbEtleShrZXkpO1xuICAgICAgICAgICAgc2V0RmlsZXNUb1VwbG9hZChbXSk7XG4gICAgICAgIH1cbiAgICB9LCBba2V5LCBvcmlnaW5hbEtleV0pO1xuICAgIGNvbnN0IG9uVXBsb2FkID0gKGZpbGVzKSA9PiB7XG4gICAgICAgIHNldEZpbGVzVG9VcGxvYWQoZmlsZXMpO1xuICAgICAgICBvbkNoYW5nZShjdXN0b20uZmlsZVByb3BlcnR5LCBmaWxlcyk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVSZW1vdmUgPSAoKSA9PiB7XG4gICAgICAgIG9uQ2hhbmdlKGN1c3RvbS5maWxlUHJvcGVydHksIG51bGwpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTXVsdGlSZW1vdmUgPSAoc2luZ2xlS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gKGZsYXQuZ2V0KHJlY29yZC5wYXJhbXMsIGN1c3RvbS5rZXlQcm9wZXJ0eSkgfHwgW10pLmluZGV4T2Yoc2luZ2xlS2V5KTtcbiAgICAgICAgY29uc3QgZmlsZXNUb0RlbGV0ZSA9IGZsYXQuZ2V0KHJlY29yZC5wYXJhbXMsIGN1c3RvbS5maWxlc1RvRGVsZXRlUHJvcGVydHkpIHx8IFtdO1xuICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1BhdGggPSBwYXRoLm1hcCgoY3VycmVudFBhdGgsIGkpID0+IChpICE9PSBpbmRleCA/IGN1cnJlbnRQYXRoIDogbnVsbCkpO1xuICAgICAgICAgICAgbGV0IG5ld1BhcmFtcyA9IGZsYXQuc2V0KHJlY29yZC5wYXJhbXMsIGN1c3RvbS5maWxlc1RvRGVsZXRlUHJvcGVydHksIFsuLi5maWxlc1RvRGVsZXRlLCBpbmRleF0pO1xuICAgICAgICAgICAgbmV3UGFyYW1zID0gZmxhdC5zZXQobmV3UGFyYW1zLCBjdXN0b20uZmlsZVBhdGhQcm9wZXJ0eSwgbmV3UGF0aCk7XG4gICAgICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgICAgICAgLi4ucmVjb3JkLFxuICAgICAgICAgICAgICAgIHBhcmFtczogbmV3UGFyYW1zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjYW5ub3QgcmVtb3ZlIGZpbGUgd2hlbiB0aGVyZSBhcmUgbm8gdXBsb2FkZWQgZmlsZXMgeWV0Jyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtR3JvdXAsIG51bGwsXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGFiZWwsIG51bGwsIHRyYW5zbGF0ZVByb3BlcnR5KHByb3BlcnR5LmxhYmVsLCBwcm9wZXJ0eS5yZXNvdXJjZUlkKSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcFpvbmUsIHsgb25DaGFuZ2U6IG9uVXBsb2FkLCBtdWx0aXBsZTogY3VzdG9tLm11bHRpcGxlLCB2YWxpZGF0ZToge1xuICAgICAgICAgICAgICAgIG1pbWVUeXBlczogY3VzdG9tLm1pbWVUeXBlcyxcbiAgICAgICAgICAgICAgICBtYXhTaXplOiBjdXN0b20ubWF4U2l6ZSxcbiAgICAgICAgICAgIH0sIGZpbGVzOiBmaWxlc1RvVXBsb2FkIH0pLFxuICAgICAgICAhY3VzdG9tLm11bHRpcGxlICYmIGtleSAmJiBwYXRoICYmICFmaWxlc1RvVXBsb2FkLmxlbmd0aCAmJiBmaWxlICE9PSBudWxsICYmIChSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bab25lSXRlbSwgeyBmaWxlbmFtZToga2V5LCBzcmM6IHBhdGgsIG9uUmVtb3ZlOiBoYW5kbGVSZW1vdmUgfSkpLFxuICAgICAgICBjdXN0b20ubXVsdGlwbGUgJiYga2V5ICYmIGtleS5sZW5ndGggJiYgcGF0aCA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBrZXkubWFwKChzaW5nbGVLZXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAvLyB3aGVuIHdlIHJlbW92ZSBpdGVtcyB3ZSBzZXQgb25seSBwYXRoIGluZGV4IHRvIG51bGxzLlxuICAgICAgICAgICAgLy8ga2V5IGlzIHN0aWxsIHRoZXJlLiBUaGlzIGlzIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgdG8gbWFpbnRhaW4gYWxsIHRoZSBpbmRleGVzLiBTbyBoZXJlIHdlIHNpbXBseSBmaWx0ZXIgb3V0IGVsZW1lbnRzIHdoaWNoXG4gICAgICAgICAgICAvLyB3ZXJlIHJlbW92ZWQgYW5kIGRpc3BsYXkgb25seSB3aGF0IHdhcyBsZWZ0XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGF0aCA9IHBhdGhbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQYXRoID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcFpvbmVJdGVtLCB7IGtleTogc2luZ2xlS2V5LCBmaWxlbmFtZTogc2luZ2xlS2V5LCBzcmM6IHBhdGhbaW5kZXhdLCBvblJlbW92ZTogKCkgPT4gaGFuZGxlTXVsdGlSZW1vdmUoc2luZ2xlS2V5KSB9KSkgOiAnJztcbiAgICAgICAgfSkpKSA6ICcnKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgRWRpdDtcbiIsImV4cG9ydCBjb25zdCBBdWRpb01pbWVUeXBlcyA9IFtcbiAgICAnYXVkaW8vYWFjJyxcbiAgICAnYXVkaW8vbWlkaScsXG4gICAgJ2F1ZGlvL3gtbWlkaScsXG4gICAgJ2F1ZGlvL21wZWcnLFxuICAgICdhdWRpby9vZ2cnLFxuICAgICdhcHBsaWNhdGlvbi9vZ2cnLFxuICAgICdhdWRpby9vcHVzJyxcbiAgICAnYXVkaW8vd2F2JyxcbiAgICAnYXVkaW8vd2VibScsXG4gICAgJ2F1ZGlvLzNncHAyJyxcbl07XG5leHBvcnQgY29uc3QgVmlkZW9NaW1lVHlwZXMgPSBbXG4gICAgJ3ZpZGVvL3gtbXN2aWRlbycsXG4gICAgJ3ZpZGVvL21wZWcnLFxuICAgICd2aWRlby9vZ2cnLFxuICAgICd2aWRlby9tcDJ0JyxcbiAgICAndmlkZW8vd2VibScsXG4gICAgJ3ZpZGVvLzNncHAnLFxuICAgICd2aWRlby8zZ3BwMicsXG5dO1xuZXhwb3J0IGNvbnN0IEltYWdlTWltZVR5cGVzID0gW1xuICAgICdpbWFnZS9ibXAnLFxuICAgICdpbWFnZS9naWYnLFxuICAgICdpbWFnZS9qcGVnJyxcbiAgICAnaW1hZ2UvcG5nJyxcbiAgICAnaW1hZ2Uvc3ZnK3htbCcsXG4gICAgJ2ltYWdlL3ZuZC5taWNyb3NvZnQuaWNvbicsXG4gICAgJ2ltYWdlL3RpZmYnLFxuICAgICdpbWFnZS93ZWJwJyxcbl07XG5leHBvcnQgY29uc3QgQ29tcHJlc3NlZE1pbWVUeXBlcyA9IFtcbiAgICAnYXBwbGljYXRpb24veC1iemlwJyxcbiAgICAnYXBwbGljYXRpb24veC1iemlwMicsXG4gICAgJ2FwcGxpY2F0aW9uL2d6aXAnLFxuICAgICdhcHBsaWNhdGlvbi9qYXZhLWFyY2hpdmUnLFxuICAgICdhcHBsaWNhdGlvbi94LXRhcicsXG4gICAgJ2FwcGxpY2F0aW9uL3ppcCcsXG4gICAgJ2FwcGxpY2F0aW9uL3gtN3otY29tcHJlc3NlZCcsXG5dO1xuZXhwb3J0IGNvbnN0IERvY3VtZW50TWltZVR5cGVzID0gW1xuICAgICdhcHBsaWNhdGlvbi94LWFiaXdvcmQnLFxuICAgICdhcHBsaWNhdGlvbi94LWZyZWVhcmMnLFxuICAgICdhcHBsaWNhdGlvbi92bmQuYW1hem9uLmVib29rJyxcbiAgICAnYXBwbGljYXRpb24vbXN3b3JkJyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnLFxuICAgICdhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdCcsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uJyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldCcsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dCcsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50JyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbicsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5yYXInLFxuICAgICdhcHBsaWNhdGlvbi9ydGYnLFxuICAgICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnLFxuICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcsXG5dO1xuZXhwb3J0IGNvbnN0IFRleHRNaW1lVHlwZXMgPSBbXG4gICAgJ3RleHQvY3NzJyxcbiAgICAndGV4dC9jc3YnLFxuICAgICd0ZXh0L2h0bWwnLFxuICAgICd0ZXh0L2NhbGVuZGFyJyxcbiAgICAndGV4dC9qYXZhc2NyaXB0JyxcbiAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgJ2FwcGxpY2F0aW9uL2xkK2pzb24nLFxuICAgICd0ZXh0L2phdmFzY3JpcHQnLFxuICAgICd0ZXh0L3BsYWluJyxcbiAgICAnYXBwbGljYXRpb24veGh0bWwreG1sJyxcbiAgICAnYXBwbGljYXRpb24veG1sJyxcbiAgICAndGV4dC94bWwnLFxuXTtcbmV4cG9ydCBjb25zdCBCaW5hcnlEb2NzTWltZVR5cGVzID0gW1xuICAgICdhcHBsaWNhdGlvbi9lcHViK3ppcCcsXG4gICAgJ2FwcGxpY2F0aW9uL3BkZicsXG5dO1xuZXhwb3J0IGNvbnN0IEZvbnRNaW1lVHlwZXMgPSBbXG4gICAgJ2ZvbnQvb3RmJyxcbiAgICAnZm9udC90dGYnLFxuICAgICdmb250L3dvZmYnLFxuICAgICdmb250L3dvZmYyJyxcbl07XG5leHBvcnQgY29uc3QgT3RoZXJNaW1lVHlwZXMgPSBbXG4gICAgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXG4gICAgJ2FwcGxpY2F0aW9uL3gtY3NoJyxcbiAgICAnYXBwbGljYXRpb24vdm5kLmFwcGxlLmluc3RhbGxlcit4bWwnLFxuICAgICdhcHBsaWNhdGlvbi94LWh0dHBkLXBocCcsXG4gICAgJ2FwcGxpY2F0aW9uL3gtc2gnLFxuICAgICdhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCcsXG4gICAgJ3ZuZC52aXNpbycsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5tb3ppbGxhLnh1bCt4bWwnLFxuXTtcbmV4cG9ydCBjb25zdCBNaW1lVHlwZXMgPSBbXG4gICAgLi4uQXVkaW9NaW1lVHlwZXMsXG4gICAgLi4uVmlkZW9NaW1lVHlwZXMsXG4gICAgLi4uSW1hZ2VNaW1lVHlwZXMsXG4gICAgLi4uQ29tcHJlc3NlZE1pbWVUeXBlcyxcbiAgICAuLi5Eb2N1bWVudE1pbWVUeXBlcyxcbiAgICAuLi5UZXh0TWltZVR5cGVzLFxuICAgIC4uLkJpbmFyeURvY3NNaW1lVHlwZXMsXG4gICAgLi4uT3RoZXJNaW1lVHlwZXMsXG4gICAgLi4uRm9udE1pbWVUeXBlcyxcbiAgICAuLi5PdGhlck1pbWVUeXBlcyxcbl07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBCb3gsIEJ1dHRvbiwgSWNvbiB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgZmxhdCB9IGZyb20gJ2FkbWluanMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEF1ZGlvTWltZVR5cGVzLCBJbWFnZU1pbWVUeXBlcyB9IGZyb20gJy4uL3R5cGVzL21pbWUtdHlwZXMudHlwZS5qcyc7XG5jb25zdCBTaW5nbGVGaWxlID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBuYW1lLCBwYXRoLCBtaW1lVHlwZSwgd2lkdGggfSA9IHByb3BzO1xuICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoKSB7XG4gICAgICAgIGlmIChtaW1lVHlwZSAmJiBJbWFnZU1pbWVUeXBlcy5pbmNsdWRlcyhtaW1lVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7IHNyYzogcGF0aCwgc3R5bGU6IHsgbWF4SGVpZ2h0OiB3aWR0aCwgbWF4V2lkdGg6IHdpZHRoIH0sIGFsdDogbmFtZSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbWVUeXBlICYmIEF1ZGlvTWltZVR5cGVzLmluY2x1ZGVzKG1pbWVUeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIiwgeyBjb250cm9sczogdHJ1ZSwgc3JjOiBwYXRoIH0sXG4gICAgICAgICAgICAgICAgXCJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGVcIixcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCBudWxsLCBcImF1ZGlvXCIpLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0cmFja1wiLCB7IGtpbmQ6IFwiY2FwdGlvbnNcIiB9KSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChCb3gsIG51bGwsXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7IGFzOiBcImFcIiwgaHJlZjogcGF0aCwgbWw6IFwiZGVmYXVsdFwiLCBzaXplOiBcInNtXCIsIHJvdW5kZWQ6IHRydWUsIHRhcmdldDogXCJfYmxhbmtcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IGljb246IFwiRG9jdW1lbnREb3dubG9hZFwiLCBjb2xvcjogXCJ3aGl0ZVwiLCBtcjogXCJkZWZhdWx0XCIgfSksXG4gICAgICAgICAgICBuYW1lKSkpO1xufTtcbmNvbnN0IEZpbGUgPSAoeyB3aWR0aCwgcmVjb3JkLCBwcm9wZXJ0eSB9KSA9PiB7XG4gICAgY29uc3QgeyBjdXN0b20gfSA9IHByb3BlcnR5O1xuICAgIGxldCBwYXRoID0gZmxhdC5nZXQocmVjb3JkPy5wYXJhbXMsIGN1c3RvbS5maWxlUGF0aFByb3BlcnR5KTtcbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBmbGF0LmdldChyZWNvcmQ/LnBhcmFtcywgY3VzdG9tLmZpbGVOYW1lUHJvcGVydHkgPyBjdXN0b20uZmlsZU5hbWVQcm9wZXJ0eSA6IGN1c3RvbS5rZXlQcm9wZXJ0eSk7XG4gICAgY29uc3QgbWltZVR5cGUgPSBjdXN0b20ubWltZVR5cGVQcm9wZXJ0eVxuICAgICAgICAmJiBmbGF0LmdldChyZWNvcmQ/LnBhcmFtcywgY3VzdG9tLm1pbWVUeXBlUHJvcGVydHkpO1xuICAgIGlmICghcHJvcGVydHkuY3VzdG9tLm11bHRpcGxlKSB7XG4gICAgICAgIGlmIChjdXN0b20ub3B0cyAmJiBjdXN0b20ub3B0cy5iYXNlVXJsKSB7XG4gICAgICAgICAgICBwYXRoID0gYCR7Y3VzdG9tLm9wdHMuYmFzZVVybH0vJHtuYW1lfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFNpbmdsZUZpbGUsIHsgcGF0aDogcGF0aCwgbmFtZTogbmFtZSwgd2lkdGg6IHdpZHRoLCBtaW1lVHlwZTogbWltZVR5cGUgfSkpO1xuICAgIH1cbiAgICBpZiAoY3VzdG9tLm9wdHMgJiYgY3VzdG9tLm9wdHMuYmFzZVVybCkge1xuICAgICAgICBjb25zdCBiYXNlVXJsID0gY3VzdG9tLm9wdHMuYmFzZVVybCB8fCAnJztcbiAgICAgICAgcGF0aCA9IHBhdGgubWFwKChzaW5nbGVQYXRoLCBpbmRleCkgPT4gYCR7YmFzZVVybH0vJHtuYW1lW2luZGV4XX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBwYXRoLm1hcCgoc2luZ2xlUGF0aCwgaW5kZXgpID0+IChSZWFjdC5jcmVhdGVFbGVtZW50KFNpbmdsZUZpbGUsIHsga2V5OiBzaW5nbGVQYXRoLCBwYXRoOiBzaW5nbGVQYXRoLCBuYW1lOiBuYW1lW2luZGV4XSwgd2lkdGg6IHdpZHRoLCBtaW1lVHlwZTogbWltZVR5cGVbaW5kZXhdIH0pKSkpKTtcbn07XG5leHBvcnQgZGVmYXVsdCBGaWxlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGaWxlIGZyb20gJy4vZmlsZS5qcyc7XG5jb25zdCBMaXN0ID0gKHByb3BzKSA9PiAoUmVhY3QuY3JlYXRlRWxlbWVudChGaWxlLCB7IHdpZHRoOiAxMDAsIC4uLnByb3BzIH0pKTtcbmV4cG9ydCBkZWZhdWx0IExpc3Q7XG4iLCJpbXBvcnQgeyBGb3JtR3JvdXAsIExhYmVsIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZpbGUgZnJvbSAnLi9maWxlLmpzJztcbmNvbnN0IFNob3cgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHByb3BlcnR5IH0gPSBwcm9wcztcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUdyb3VwLCBudWxsLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExhYmVsLCBudWxsLCBwcm9wZXJ0eS5sYWJlbCksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmlsZSwgeyB3aWR0aDogXCIxMDAlXCIsIC4uLnByb3BzIH0pKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgU2hvdztcbiIsImltcG9ydCB7IEJveCwgQnV0dG9uLCBUZXh0IH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBCYXNlUHJvcGVydHlDb21wb25lbnQsIHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnYWRtaW5qcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmNvbnN0IFBhc3N3b3JkRWRpdCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHByb3BlcnR5LCByZWNvcmQsIHJlc291cmNlIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IHRyYW5zbGF0ZUJ1dHRvbjogdGIgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gICAgY29uc3QgW3Nob3dQYXNzd29yZCwgdG9nZ2xlUGFzc3dvcmRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghc2hvd1Bhc3N3b3JkKSB7XG4gICAgICAgICAgICBvbkNoYW5nZShwcm9wZXJ0eS5uYW1lLCAnJyk7XG4gICAgICAgIH1cbiAgICB9LCBbb25DaGFuZ2UsIHNob3dQYXNzd29yZF0pO1xuICAgIC8vIEZvciBuZXcgcmVjb3JkcyBhbHdheXMgc2hvdyB0aGUgcHJvcGVydHlcbiAgICBpZiAoIXJlY29yZC5pZCkge1xuICAgICAgICByZXR1cm4gPEJhc2VQcm9wZXJ0eUNvbXBvbmVudC5QYXNzd29yZC5FZGl0IHsuLi5wcm9wc30vPjtcbiAgICB9XG4gICAgcmV0dXJuICg8Qm94PlxuICAgICAge3Nob3dQYXNzd29yZCAmJiA8QmFzZVByb3BlcnR5Q29tcG9uZW50LlBhc3N3b3JkLkVkaXQgey4uLnByb3BzfS8+fVxuICAgICAgPEJveCBtYj1cInhsXCI+XG4gICAgICAgIDxUZXh0IHRleHRBbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdG9nZ2xlUGFzc3dvcmQoIXNob3dQYXNzd29yZCl9IHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgIHtzaG93UGFzc3dvcmQgPyB0YignY2FuY2VsJywgcmVzb3VyY2UuaWQpIDogdGIoJ2NoYW5nZVBhc3N3b3JkJywgcmVzb3VyY2UuaWQpfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L0JveD5cbiAgICA8L0JveD4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IFBhc3N3b3JkRWRpdDtcbiIsIkFkbWluSlMuVXNlckNvbXBvbmVudHMgPSB7fVxuaW1wb3J0IFVwbG9hZEVkaXRDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BhZG1pbmpzL3VwbG9hZC9idWlsZC9mZWF0dXJlcy91cGxvYWQtZmlsZS9jb21wb25lbnRzL1VwbG9hZEVkaXRDb21wb25lbnQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlVwbG9hZEVkaXRDb21wb25lbnQgPSBVcGxvYWRFZGl0Q29tcG9uZW50XG5pbXBvcnQgVXBsb2FkTGlzdENvbXBvbmVudCBmcm9tICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGFkbWluanMvdXBsb2FkL2J1aWxkL2ZlYXR1cmVzL3VwbG9hZC1maWxlL2NvbXBvbmVudHMvVXBsb2FkTGlzdENvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuVXBsb2FkTGlzdENvbXBvbmVudCA9IFVwbG9hZExpc3RDb21wb25lbnRcbmltcG9ydCBVcGxvYWRTaG93Q29tcG9uZW50IGZyb20gJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYWRtaW5qcy91cGxvYWQvYnVpbGQvZmVhdHVyZXMvdXBsb2FkLWZpbGUvY29tcG9uZW50cy9VcGxvYWRTaG93Q29tcG9uZW50J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5VcGxvYWRTaG93Q29tcG9uZW50ID0gVXBsb2FkU2hvd0NvbXBvbmVudFxuaW1wb3J0IFBhc3N3b3JkRWRpdENvbXBvbmVudCBmcm9tICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGFkbWluanMvcGFzc3dvcmRzL2J1aWxkL2NvbXBvbmVudHMvUGFzc3dvcmRFZGl0Q29tcG9uZW50J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5QYXNzd29yZEVkaXRDb21wb25lbnQgPSBQYXNzd29yZEVkaXRDb21wb25lbnQiXSwibmFtZXMiOlsiRWRpdCIsInByb3BlcnR5IiwicmVjb3JkIiwib25DaGFuZ2UiLCJ0cmFuc2xhdGVQcm9wZXJ0eSIsInVzZVRyYW5zbGF0aW9uIiwicGFyYW1zIiwiY3VzdG9tIiwicGF0aCIsImZsYXQiLCJnZXQiLCJmaWxlUGF0aFByb3BlcnR5Iiwia2V5Iiwia2V5UHJvcGVydHkiLCJmaWxlIiwiZmlsZVByb3BlcnR5Iiwib3JpZ2luYWxLZXkiLCJzZXRPcmlnaW5hbEtleSIsInVzZVN0YXRlIiwiZmlsZXNUb1VwbG9hZCIsInNldEZpbGVzVG9VcGxvYWQiLCJ1c2VFZmZlY3QiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJvblVwbG9hZCIsImZpbGVzIiwiaGFuZGxlUmVtb3ZlIiwiaGFuZGxlTXVsdGlSZW1vdmUiLCJzaW5nbGVLZXkiLCJpbmRleCIsImluZGV4T2YiLCJmaWxlc1RvRGVsZXRlIiwiZmlsZXNUb0RlbGV0ZVByb3BlcnR5IiwibmV3UGF0aCIsIm1hcCIsImN1cnJlbnRQYXRoIiwiaSIsIm5ld1BhcmFtcyIsInNldCIsImNvbnNvbGUiLCJsb2ciLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJGb3JtR3JvdXAiLCJMYWJlbCIsImxhYmVsIiwicmVzb3VyY2VJZCIsIkRyb3Bab25lIiwibXVsdGlwbGUiLCJ2YWxpZGF0ZSIsIm1pbWVUeXBlcyIsIm1heFNpemUiLCJEcm9wWm9uZUl0ZW0iLCJmaWxlbmFtZSIsInNyYyIsIm9uUmVtb3ZlIiwiRnJhZ21lbnQiLCJBdWRpb01pbWVUeXBlcyIsIkltYWdlTWltZVR5cGVzIiwiU2luZ2xlRmlsZSIsInByb3BzIiwibmFtZSIsIm1pbWVUeXBlIiwid2lkdGgiLCJpbmNsdWRlcyIsInN0eWxlIiwibWF4SGVpZ2h0IiwibWF4V2lkdGgiLCJhbHQiLCJjb250cm9scyIsImtpbmQiLCJCb3giLCJCdXR0b24iLCJhcyIsImhyZWYiLCJtbCIsInNpemUiLCJyb3VuZGVkIiwidGFyZ2V0IiwiSWNvbiIsImljb24iLCJjb2xvciIsIm1yIiwiRmlsZSIsImZpbGVOYW1lUHJvcGVydHkiLCJtaW1lVHlwZVByb3BlcnR5Iiwib3B0cyIsImJhc2VVcmwiLCJzaW5nbGVQYXRoIiwiTGlzdCIsIlNob3ciLCJQYXNzd29yZEVkaXQiLCJyZXNvdXJjZSIsInRyYW5zbGF0ZUJ1dHRvbiIsInRiIiwic2hvd1Bhc3N3b3JkIiwidG9nZ2xlUGFzc3dvcmQiLCJpZCIsIkJhc2VQcm9wZXJ0eUNvbXBvbmVudCIsIlBhc3N3b3JkIiwibWIiLCJUZXh0IiwidGV4dEFsaWduIiwib25DbGljayIsInR5cGUiLCJBZG1pbkpTIiwiVXNlckNvbXBvbmVudHMiLCJVcGxvYWRFZGl0Q29tcG9uZW50IiwiVXBsb2FkTGlzdENvbXBvbmVudCIsIlVwbG9hZFNob3dDb21wb25lbnQiLCJQYXNzd29yZEVkaXRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7SUFHQSxNQUFNQSxJQUFJLEdBQUdBLENBQUM7TUFBRUMsUUFBUTtNQUFFQyxNQUFNO0lBQUVDLEVBQUFBLFFBQUFBO0lBQVMsQ0FBQyxLQUFLO01BQzdDLE1BQU07SUFBRUMsSUFBQUEsaUJBQUFBO09BQW1CLEdBQUdDLHNCQUFjLEVBQUUsQ0FBQTtNQUM5QyxNQUFNO0lBQUVDLElBQUFBLE1BQUFBO0lBQU8sR0FBQyxHQUFHSixNQUFNLENBQUE7TUFDekIsTUFBTTtJQUFFSyxJQUFBQSxNQUFBQTtJQUFPLEdBQUMsR0FBR04sUUFBUSxDQUFBO01BQzNCLE1BQU1PLElBQUksR0FBR0MsWUFBSSxDQUFDQyxHQUFHLENBQUNKLE1BQU0sRUFBRUMsTUFBTSxDQUFDSSxnQkFBZ0IsQ0FBQyxDQUFBO01BQ3RELE1BQU1DLEdBQUcsR0FBR0gsWUFBSSxDQUFDQyxHQUFHLENBQUNKLE1BQU0sRUFBRUMsTUFBTSxDQUFDTSxXQUFXLENBQUMsQ0FBQTtNQUNoRCxNQUFNQyxJQUFJLEdBQUdMLFlBQUksQ0FBQ0MsR0FBRyxDQUFDSixNQUFNLEVBQUVDLE1BQU0sQ0FBQ1EsWUFBWSxDQUFDLENBQUE7TUFDbEQsTUFBTSxDQUFDQyxXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHQyxjQUFRLENBQUNOLEdB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
